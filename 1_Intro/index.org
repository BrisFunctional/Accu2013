#+TITLE: Functional Programming for the Dysfunctional Programmer
#+AUTHOR: Matthew Gilliard and Thom Leggett

* Functional Programming for the Dysfunctional Programmer             :slide:
** Prelude
*** Who  are we?                                                      :slide:
    + Matthew Gilliard
      * Twitter: [[https://twitter.com/mjgilliard][@mjgilliard]]
    + Thom Leggett
      * Twitter: [[https://twitter.com/thomleggett][@thomleggett]]
    + BrisFunctional
      * Twitter: [[http://twitter.com/BrisFunctional][@BrisFunctional]]
      * Web: [[http://brisfunctional.github.com]]

*** Who are you?                                                      :slide:
    + Introduce yourselves to your table.
    + What do you know about functional programming?
    + What languages do you use day-to-day?

** What is functional programming?                                    :slide:
*** Notes                                                             :notes:
    + Languages on post-its.
    + Functional to dysfunctional scale.
    + Functional definitions.
    + Next steps.
*** John Hughes (Why Functional Programming Matters)                  :slide:
    + "Functional programming is so called because its fundamental operation is
the application of functions to arguments"
    + [[http://www.cse.chalmers.se/~rjmh/Papers/whyfp.html]]
*** Wikipedia                                                         :slide:
    + "[FP] treats computation as the evaluation of mathematical functions and avoids state and mutable data."
    + [[http://en.wikipedia.org/wiki/Functional_Programming]]
*** Python.org                                                        :slide:
    + "the opposite of object-oriented programming"
    + [[http://docs.python.org/2/howto/functional.html]]
*** Robert C Martin ([[http://twitter.com/UncleBob][@UncleBob]])                                       :slide:
    + "is programming without assignment statements"
    + [[http://pragprog.com/magazines/2013-01/functional-programming-basics]]

*** So what?                                                          :slide:
**** Notes                                                            :notes:
     + Mainly uses immutable data types
     + And side-effect-free functions
     + So:
       * order of execution is not important
       * functions can be memoized
       * concurrent programming becomes easier

** An unfeasibly short introduction to clojure                        :slide:

*** Clooj                                                             :slide:
    http://j.mp/clooj-accu2013 or from USB stick.
    + Simple self-contained IDE for clojure.
    + Project, file and repl.
    + Rough edges.
**** Notes                                                            :notes:
     + Restart the REPL from REPL menu or =C-r= to get it working.
     + Use projects or it won't work.

*** REPL?                                                             :slide:
    + Read, eval, print, loop.

    #+BEGIN_SRC clojure
    user => (use 'clojure.repl)
    #+END_SRC

*** Clojure                                                           :slide:
    + Find 1_Intro/intro-to-clojure directory.
    + Open project.clj in your shiny new clooj installation.

* org-html-slideshow incantations
#+TAGS: slide(s) notes(n)

#+STYLE: <link rel="stylesheet" type="text/css" href="../org-html-slideshow/common.css" />
#+STYLE: <link rel="stylesheet" type="text/css" href="../org-html-slideshow/screen.css" media="screen" />
#+STYLE: <link rel="stylesheet" type="text/css" href="../org-html-slideshow/projection.css" media="projection" />
#+STYLE: <link rel="stylesheet" type="text/css" href="../org-html-slideshow/presenter.css" media="presenter" />

#+BEGIN_HTML
<script type="text/javascript" src="../org-html-slideshow/org-html-slideshow.js"></script>
#+END_HTML

#+OPTIONS:   H:6 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

# Local Variables:
# org-export-html-style-include-default: nil
# org-export-html-style-include-scripts: nil
  # End:
