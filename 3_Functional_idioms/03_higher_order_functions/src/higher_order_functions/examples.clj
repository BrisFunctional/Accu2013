(ns higher-order-functions.examples
  (:use clojure.repl))

;; http://projecteuler.net/problem=2

;; Each new term in the Fibonacci sequence is 
;; generated by adding the previous two terms. 
;; By starting with 1 and 2, the first 10 terms 
;; will be:

;; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

;; By considering the terms in the Fibonacci 
;; sequence whose values do not exceed four 
;; million, find the sum of the even-valued terms.

;; given our earlier definition...
(def fibo 
  (lazy-cat [0 1] (map + fibo (rest fibo))))

;;...and a bit of help...

(doc reduce)
(doc filter)
(doc even?)
(doc take-while)
(doc partial) ;; or inline function: #(%)

;; ...can you solve it in 1 line?

(defn euler2 []
  ;; fill in the gaps
  )

;; eval this to test your solution
(= 4613732
   (euler2))