#+TITLE: Functional idioms
#+AUTHOR: Matthew Gilliard and Thom Leggett

* Functional Idioms                                                   :slide:
** Immutability                                                       :slide:
** Immutability                                                       :slide:
  + Immutable things do not change over time
*** Matthew's notes                                                   :notes:
  + A common objection - SO SLOW
  + Can be implemented with copy-on-write
    * Makes a complete copy on every change
  + Better to use persistent datastructures
*** Persistent data structures                                        :slide:
  + "a data structure that always preserves the previous version of itself when it is modified."
    * [[http://en.wikipedia.org/wiki/Persistent_data_structure][wikipedia of course :)]]
  + (nothing to do with database-style persistence)
*** Structural sharing                                                :slide:
  + A way of making persistent data structures efficiently
  + Lets do an example...
*** Stack                                                             :slide:
*** Stack                                                             :slide:
  + s0 = empty_stack()
*** Stack                                                             :slide:
  + s0 = empty_stack()
  + s1 = push(s0, "Z")
*** Stack                                                             :slide:
  + s0 = empty_stack()
  + s1 = push(s0, "Z")
  + s2 = push(s1, "Y")
*** Stack                                                             :slide:
  + s0 = empty_stack()
  + s1 = push(s0, "Z")
  + s2 = push(s1, "Y")
  + s3 = push(s2, "X")
*** Stack                                                             :slide:
  + s0 = empty_stack()
  + s1 = push(s0, "Z")
  + s2 = push(s1, "Y")
  + s3 = push(s2, "X")
  + [v, s4] = pop(s3)
*** Stack                                                             :slide:
  + s0 = empty_stack()
  + s1 = push(s0, "Z")
  + s2 = push(s1, "Y")
  + s3 = push(s2, "X")
  + [v, s4] = pop(s3) ;; v == "X", s4 == s2
*** Stack                                                             :slide:
  + s0 = empty_stack()
  + s1 = push(s0, "Z")
  + s2 = push(s1, "Y")
  + s3 = push(s2, "X")
  + [v, s4] = pop(s3) ;; v == "X", s4 == s2
  + s5 = push(s4, "Q")

*** Sorted Set                                                        :slide:
*** Sorted Set                                                        :slide:
  + s1 = ["a", "b", "c", "d", "f", "g", "h"]
*** Sorted Set                                                        :slide:
  + s1 = ["a", "b", "c", "d", "f", "g", "h"]
  + s2 = insert(s, "e")
*** Doubly-linked lists                                               :slide:
*** Doubly-linked lists                                               :slide:
  + ???
*** Trees (again)                                                     :slide:
*** Trees (again)                                                     :slide:
  [[./branched_tree.png]]
*** Trees (again)                                                     :slide:
  [[./high_branching_factor.jpg]]
*** Language support                                                  :slide:
  + If not provided with the core language, we can make a library
    * eg [[http://code.google.com/p/pcollections/]]

** Higher-Order Functions                                             :slide:
*** Thom's notes                                                      :notes:
** Laziness                                                           :slide:
*** Matthew's notes                                                   :notes:
  + See the example

* org-html-slideshow incantations
#+TAGS: slide(s) notes(n)

#+STYLE: <link rel="stylesheet" type="text/css" href="../org-html-slideshow/common.css" />
#+STYLE: <link rel="stylesheet" type="text/css" href="../org-html-slideshow/screen.css" media="screen" />
#+STYLE: <link rel="stylesheet" type="text/css" href="../org-html-slideshow/projection.css" media="projection" />
#+STYLE: <link rel="stylesheet" type="text/css" href="../org-html-slideshow/presenter.css" media="presenter" />

#+BEGIN_HTML
<script type="text/javascript" src="../org-html-slideshow/org-html-slideshow.js"></script>
#+END_HTML

#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

# Local Variables:
# org-export-html-style-include-default: nil
# org-export-html-style-include-scripts: nil
  # End:
